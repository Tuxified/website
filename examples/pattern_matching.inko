# Pattern matching
fn main {
  match Option.Some(42) {
    case Some(number) -> number
    case None -> 0
  }

  # Guards are also supported:
  match Option.Some(42) {
    case Some(number) if number < 50 -> number
    case None -> 0
  }

  # `if` also supports pattern matching:
  if let Some(number) = Option.Some(42) {
    number
  } else {
    0
  }

  # And so does `let`:
  let Some(number) = Option.Some(42) else return

  # And `while` also supports it:
  let numbers = [10, 20]

  while let Some(number) = numbers.pop {
    # ...
  }
}
